// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Reqnroll_ProjectMars.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LanguageScenarios")]
    public partial class LanguageScenariosFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LanguageScenarios", "This feature file contains scenarios related to the profile page where a user can" +
                " manage their languages present in their profile.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "LanguageScenarios.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("I am logged in with valid credentials \"test@gmail.com\" and \"test1234\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("I am on the Languages tab on the user profile", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add four new languages with different language levels")]
        [NUnit.Framework.CategoryAttribute("ValidScenario")]
        [NUnit.Framework.TestCaseAttribute("English", "Conversational", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("French", "Basic", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("German", "Native/Bilingual", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("Spanish", "Fluent", "No", null)]
        public async System.Threading.Tasks.Task AddFourNewLanguagesWithDifferentLanguageLevels(string language, string level, string visibility, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ValidScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Language", language);
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("Visibility", visibility);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Add four new languages with different language levels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 12
 await testRunner.WhenAsync(string.Format("I add a new language \"{0}\" with level \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
 await testRunner.ThenAsync(string.Format("I should see \"{0}\" displayed with the corresponding level \"{1}\" in the languages " +
                            "tab", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
 await testRunner.AndAsync(string.Format("the ADD NEW button should {0} after adding language", visibility), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can update a language after adding multiple languages")]
        [NUnit.Framework.CategoryAttribute("ValidScenario")]
        public async System.Threading.Tasks.Task UserCanUpdateALanguageAfterAddingMultipleLanguages()
        {
            string[] tagsOfScenario = new string[] {
                    "ValidScenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User can update a language after adding multiple languages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Language",
                            "Level"});
                table1.AddRow(new string[] {
                            "English",
                            "Conversational"});
                table1.AddRow(new string[] {
                            "French",
                            "Basic"});
                table1.AddRow(new string[] {
                            "German",
                            "Native/Bilingual"});
#line 25
 await testRunner.GivenAsync("the following languages exist in the profile:", ((string)(null)), table1, "Given ");
#line hidden
#line 31
  await testRunner.WhenAsync("I click the update icon near the language \"French\" and update it to \"FrenchNew\" w" +
                        "ith level \"Fluent\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
  await testRunner.ThenAsync("I should see the language updated as \"FrenchNew\" with a confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User able to delete any language displayed in profile")]
        [NUnit.Framework.CategoryAttribute("ValidScenario")]
        public async System.Threading.Tasks.Task UserAbleToDeleteAnyLanguageDisplayedInProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "ValidScenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User able to delete any language displayed in profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Language",
                            "Level"});
                table2.AddRow(new string[] {
                            "English",
                            "Conversational"});
                table2.AddRow(new string[] {
                            "French",
                            "Basic"});
                table2.AddRow(new string[] {
                            "German",
                            "Native/Bilingual"});
#line 37
   await testRunner.GivenAsync("the following languages exist in the profile:", ((string)(null)), table2, "Given ");
#line hidden
#line 43
  await testRunner.WhenAsync("I click the delete icon near the language level of \"French\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
  await testRunner.ThenAsync("language \"French\" should be deleted with confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error message displayed while adding an already existing language")]
        [NUnit.Framework.CategoryAttribute("InvalidScenario")]
        public async System.Threading.Tasks.Task ErrorMessageDisplayedWhileAddingAnAlreadyExistingLanguage()
        {
            string[] tagsOfScenario = new string[] {
                    "InvalidScenario"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Error message displayed while adding an already existing language", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Language",
                            "Level"});
                table3.AddRow(new string[] {
                            "English",
                            "Conversational"});
                table3.AddRow(new string[] {
                            "French",
                            "Basic"});
                table3.AddRow(new string[] {
                            "German",
                            "Native/Bilingual"});
#line 48
    await testRunner.GivenAsync("the following languages exist in the profile:", ((string)(null)), table3, "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I try to add an already existing language \"French\" with level \"Fluent\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("error should be displayed on the profile avoiding addition", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error message displayed when I leave language name or level field blank")]
        [NUnit.Framework.CategoryAttribute("InvalidScenario")]
        [NUnit.Framework.TestCaseAttribute("Spanish", "", null)]
        [NUnit.Framework.TestCaseAttribute("", "Basic", null)]
        [NUnit.Framework.TestCaseAttribute("", "", null)]
        public async System.Threading.Tasks.Task ErrorMessageDisplayedWhenILeaveLanguageNameOrLevelFieldBlank(string languageName, string level, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InvalidScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LanguageName", languageName);
            argumentsOfScenario.Add("Level", level);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Error message displayed when I leave language name or level field blank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 59
 await testRunner.WhenAsync(string.Format("I leave {0} or {1} field blank while adding", languageName, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
 await testRunner.ThenAsync(string.Format("error should be displayed to enter details {0} and {1}", languageName, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User able to add languages with symbols and long characters")]
        [NUnit.Framework.CategoryAttribute("DestructiveScenario")]
        [NUnit.Framework.TestCaseAttribute("@#$%^&*()!", "Conversational", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("abcdgbahdjbsjdskjdkkkkkkkkkkkkkkkkkkkkkk", "Basic", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("ggsua12343@ncjdc", "Native/Bilingual", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("漢字漢字漢字", "Fluent", "No", null)]
        public async System.Threading.Tasks.Task UserAbleToAddLanguagesWithSymbolsAndLongCharacters(string language, string level, string visibility, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DestructiveScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Language", language);
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("Visibility", visibility);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User able to add languages with symbols and long characters", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 71
 await testRunner.WhenAsync(string.Format("I add a new language \"{0}\" with level \"{1}\"", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
 await testRunner.ThenAsync(string.Format("I should see \"{0}\" displayed with the corresponding level \"{1}\" in the languages " +
                            "tab", language, level), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
 await testRunner.AndAsync(string.Format("the ADD NEW button should {0} after adding language", visibility), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
